// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RelayerConfigUpdated extends ethereum.Event {
  get params(): RelayerConfigUpdated__Params {
    return new RelayerConfigUpdated__Params(this);
  }
}

export class RelayerConfigUpdated__Params {
  _event: RelayerConfigUpdated;

  constructor(event: RelayerConfigUpdated) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get hostname(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class RelayerRegistered extends ethereum.Event {
  get params(): RelayerRegistered__Params {
    return new RelayerRegistered__Params(this);
  }
}

export class RelayerRegistered__Params {
  _event: RelayerRegistered;

  constructor(event: RelayerRegistered) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get randHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get emailAddr(): string {
    return this._event.parameters[2].value.toString();
  }

  get hostname(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class RelayerHandler__relayersResult {
  value0: Bytes;
  value1: string;
  value2: string;

  constructor(value0: Bytes, value1: string, value2: string) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    return map;
  }

  getRandHash(): Bytes {
    return this.value0;
  }

  getEmailAddr(): string {
    return this.value1;
  }

  getHostname(): string {
    return this.value2;
  }
}

export class RelayerHandler extends ethereum.SmartContract {
  static bind(address: Address): RelayerHandler {
    return new RelayerHandler("RelayerHandler", address);
  }

  getRandHash(relayer: Address): Bytes {
    let result = super.call("getRandHash", "getRandHash(address):(bytes32)", [
      ethereum.Value.fromAddress(relayer)
    ]);

    return result[0].toBytes();
  }

  try_getRandHash(relayer: Address): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRandHash",
      "getRandHash(address):(bytes32)",
      [ethereum.Value.fromAddress(relayer)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  relayerOfEmailAddr(param0: string): Address {
    let result = super.call(
      "relayerOfEmailAddr",
      "relayerOfEmailAddr(string):(address)",
      [ethereum.Value.fromString(param0)]
    );

    return result[0].toAddress();
  }

  try_relayerOfEmailAddr(param0: string): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "relayerOfEmailAddr",
      "relayerOfEmailAddr(string):(address)",
      [ethereum.Value.fromString(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  relayerOfRandHash(param0: Bytes): Address {
    let result = super.call(
      "relayerOfRandHash",
      "relayerOfRandHash(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toAddress();
  }

  try_relayerOfRandHash(param0: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "relayerOfRandHash",
      "relayerOfRandHash(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  relayers(param0: Address): RelayerHandler__relayersResult {
    let result = super.call(
      "relayers",
      "relayers(address):(bytes32,string,string)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new RelayerHandler__relayersResult(
      result[0].toBytes(),
      result[1].toString(),
      result[2].toString()
    );
  }

  try_relayers(
    param0: Address
  ): ethereum.CallResult<RelayerHandler__relayersResult> {
    let result = super.tryCall(
      "relayers",
      "relayers(address):(bytes32,string,string)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RelayerHandler__relayersResult(
        value[0].toBytes(),
        value[1].toString(),
        value[2].toString()
      )
    );
  }
}

export class RegisterRelayerCall extends ethereum.Call {
  get inputs(): RegisterRelayerCall__Inputs {
    return new RegisterRelayerCall__Inputs(this);
  }

  get outputs(): RegisterRelayerCall__Outputs {
    return new RegisterRelayerCall__Outputs(this);
  }
}

export class RegisterRelayerCall__Inputs {
  _call: RegisterRelayerCall;

  constructor(call: RegisterRelayerCall) {
    this._call = call;
  }

  get randHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get emailAddr(): string {
    return this._call.inputValues[1].value.toString();
  }

  get hostname(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class RegisterRelayerCall__Outputs {
  _call: RegisterRelayerCall;

  constructor(call: RegisterRelayerCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateRelayerConfigCall extends ethereum.Call {
  get inputs(): UpdateRelayerConfigCall__Inputs {
    return new UpdateRelayerConfigCall__Inputs(this);
  }

  get outputs(): UpdateRelayerConfigCall__Outputs {
    return new UpdateRelayerConfigCall__Outputs(this);
  }
}

export class UpdateRelayerConfigCall__Inputs {
  _call: UpdateRelayerConfigCall;

  constructor(call: UpdateRelayerConfigCall) {
    this._call = call;
  }

  get hostname(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class UpdateRelayerConfigCall__Outputs {
  _call: UpdateRelayerConfigCall;

  constructor(call: UpdateRelayerConfigCall) {
    this._call = call;
  }
}
